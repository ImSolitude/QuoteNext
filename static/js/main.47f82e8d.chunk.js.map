{"version":3,"sources":["components/App.js","helpers.js","serviceWorker.js","index.js"],"names":["quotes","StyledButton","styled","button","_templateObject","props","hover","alignEnd","small","QuoteBox","p","_templateObject2","Link","a","_templateObject3","Author","h5","_templateObject4","TweetIcon","FontAwesomeIcon","_templateObject5","Quote","react_default","createElement","className","this","quote","author","Component","App","state","data","tweet","handleNextQuote","_this","randomColor","randomMC","getColor","document","documentElement","style","setProperty","arr","randomQuote","Math","floor","random","length","concat","setState","_this2","fetch","then","response","json","tweetURL","App_Quote","href","target","icon","faTwitter","size","onClick","index_es","faCircleNotch","pulse","fontWeight","Credit","faHeart","color","opacity","h3","_templateObject6","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yTASIA,y7DAEJ,IAAMC,EAAeC,IAAOC,OAAVC,IAcA,SAAAC,GAAK,OAAKA,EAAMC,MAAQ,QAAU,IAGvC,SAAAD,GAAK,OAAKA,EAAMC,MAAQ,UAAY,IAQhC,SAAAD,GAAK,OAAKA,EAAME,SAAW,OAAS,IACtC,SAAAF,GAAK,OAAKA,EAAMG,MAAQ,SAAW,SAG5CC,EAAWP,IAAOQ,EAAVC,KA6BRC,EAAOV,IAAOW,EAAVC,KAIJC,EAASb,IAAOc,GAAVC,KAMNC,EAAYhB,YAAOiB,IAAPjB,CAAHkB,IAGXR,EAGAX,GAIEoB,mLAEF,OACEC,EAAAT,EAAAU,cAAA,OAAKC,UAAU,iBACbF,EAAAT,EAAAU,cAACd,EAAD,KAAWgB,KAAKpB,MAAMqB,OAEtBJ,EAAAT,EAAAU,cAACR,EAAD,eAAWU,KAAKpB,MAAMsB,gBANVC,aAYdC,6MACJC,MAAQ,CACNC,KAAM,GACNL,MACE,sEACFC,OAAQ,6BACRK,MACE,+GAWJC,gBAAkB,WAChB,IAAMjC,EAASkC,EAAKJ,MAAMC,KACpBI,EAAcC,IAASC,WAC7BC,SAASC,gBAAgBC,MAAMC,YAAY,YAAaN,GACxD,IC3H6BO,ED2HzBC,GC3HyBD,ED2HM1C,GC1H1B4C,KAAKC,MAAMD,KAAKE,SAAWJ,EAAIK,SD2HlCf,EAAK,yCAAAgB,OACTL,EAAYjB,MADH,YAAAsB,OAELL,EAAYhB,QAClBO,EAAKe,SAAS,CACZvB,MAAOiB,EAAYjB,MACnBC,OAAQgB,EAAYhB,OACpBK,8FApBgB,IAAAkB,EAAAzB,KAClB0B,MACE,0IAECC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAArB,GAAI,OAAK/B,EAAS+B,IACvBqB,KAAK,kBAAMF,EAAKD,SAAS,CAAElB,KAAM/B,EAAOA,4CAmB3C,IAAMuD,EAAW9B,KAAKK,MAAME,MAC5B,OACEV,EAAAT,EAAAU,cAAA,OAAKC,UAAU,aACbF,EAAAT,EAAAU,cAACiC,EAAD,CAAO9B,MAAOD,KAAKK,MAAMJ,MAAOC,OAAQF,KAAKK,MAAMH,SACnDL,EAAAT,EAAAU,cAAA,OAAKC,UAAU,OACbF,EAAAT,EAAAU,cAACtB,EAAD,CAAcO,OAAK,EAACF,OAAK,GAEvBgB,EAAAT,EAAAU,cAACX,EAAD,CAAM6C,KAAMF,EAAUG,OAAO,UAC3BpC,EAAAT,EAAAU,cAACL,EAAD,CAAWyC,KAAMC,IAAWC,KAAK,SAGrCvC,EAAAT,EAAAU,cAACtB,EAAD,CAAcM,UAAQ,EAACuD,QAASrC,KAAKQ,iBAArC,aACa,IACXX,EAAAT,EAAAU,cAACwC,EAAA,EAAD,CACEJ,KAAMK,IACNH,KAAK,KACLI,OAAK,EACLzB,MAAO,CAAE0B,WAAY,WAK3B5C,EAAAT,EAAAU,cAAC4C,EAAD,iBACY,IACV7C,EAAAT,EAAAU,cAACwC,EAAA,EAAD,CACEJ,KAAMS,IACNH,OAAK,EACLzB,MAAO,CAAE6B,MAAO,UAAWC,QAAS,OACnC,IANL,KAOK,IACHhD,EAAAT,EAAAU,cAACX,EAAD,CACE6C,KAAK,8BACLjB,MAAO,CAAE6B,MAAO,2BAFlB,sBAhEQzC,aA4EZuC,EAASjE,IAAOqE,GAAVC,KAYG3C,IEjLK4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAETzD,EAAAT,EAAAU,cAACyD,EAAD,MACE1C,SAAS2C,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,KAAK,SAAAiC,GACjCA,EAAaC","file":"static/js/main.47f82e8d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport randomMC from \"random-material-color\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\nimport { faCircleNotch } from \"@fortawesome/free-solid-svg-icons\";\nimport { faHeart } from \"@fortawesome/free-solid-svg-icons\";\nimport { randomArrayValue } from \"../helpers\";\nimport \"./App.scss\";\nlet quotes;\n\nconst StyledButton = styled.button`\n  cursor: pointer;\n  color: white;\n  background: var(--primary);\n  border: none;\n  padding: 5px 10px;\n  border-radius: 4px;\n  font-family: \"Roboto\", sans-serif;\n  font-weight: 500;\n  text-transform: uppercase;\n  letter-spacing: 1.2px;\n  transition: 0.2s all ease;\n  &:hover {\n    transform: translateX(5px);\n    background: ${props => (props.hover ? \"white\" : \"\")};\n  }\n  &:hover > a {\n    color: ${props => (props.hover ? \"#1da1f2\" : \"\")};\n  }\n  &:focus {\n    outline: none;\n  }\n  &:active {\n    transform: translateX(15px);\n  }\n  margin-left: ${props => (props.alignEnd ? \"auto\" : \"\")};\n  font-size: ${props => (props.small ? \"0.8rem\" : \"1rem\")};\n`;\n\nconst QuoteBox = styled.p`\n  position: relative;\n  font-size: 2.5rem;\n  text-indent: 50px;\n  margin: 1rem auto;\n  font-family: \"Roboto\", sans-serif;\n  font-weight: 100;\n  &::before {\n    content: open-quote;\n    font-size: 120px;\n    font-weight: bold;\n    line-height: 120px;\n    left: -55px;\n    top: 0;\n    position: absolute;\n    width: 70px;\n  }\n  &::after {\n    content: close-quote;\n    font-weight: bold;\n  }\n  @media screen and (max-width: 500px) {\n    font-size: 2rem;\n  }\n  a > & {\n    color: inherit;\n    border: none;\n  }\n`;\nconst Link = styled.a`\n  color: inherit;\n  text-decoration: none;\n`;\nconst Author = styled.h5`\n  margin-top: 0;\n  margin-bottom: 3rem;\n  text-transform: uppercase;\n`;\n\nconst TweetIcon = styled(FontAwesomeIcon)`\n  position: relative;\n  transition: 0.3s all ease;\n  ${Link}:hover & {\n    color: #1da1f2;\n  }\n  ${StyledButton}:hover {\n    background-color: white;\n  }\n`;\nclass Quote extends Component {\n  render() {\n    return (\n      <div className=\"quote-wrapper\">\n        <QuoteBox>{this.props.quote}</QuoteBox>\n\n        <Author>— {this.props.author}</Author>\n      </div>\n    );\n  }\n}\n\nclass App extends Component {\n  state = {\n    data: \"\",\n    quote:\n      \"One can be instructed in society, one is inspired only in solitude.\",\n    author: \"Ohann Wolfgang von Goethe \",\n    tweet:\n      \"https://twitter.com/intent/tweet?text=One can be instructed in society, one is inspired only in solitude.\"\n  };\n  componentDidMount() {\n    fetch(\n      \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\"\n    )\n      .then(response => response.json())\n      .then(data => (quotes = data))\n      .then(() => this.setState({ data: quotes.quotes }));\n  }\n\n  handleNextQuote = () => {\n    const quotes = this.state.data;\n    const randomColor = randomMC.getColor();\n    document.documentElement.style.setProperty(\"--primary\", randomColor);\n    let randomQuote = randomArrayValue(quotes);\n    const tweet = `https://twitter.com/intent/tweet?text=${\n      randomQuote.quote\n    } — ${randomQuote.author}`;\n    this.setState({\n      quote: randomQuote.quote,\n      author: randomQuote.author,\n      tweet\n    });\n  };\n\n  render() {\n    const tweetURL = this.state.tweet;\n    return (\n      <div className=\"container\">\n        <Quote quote={this.state.quote} author={this.state.author} />\n        <div className=\"row\">\n          <StyledButton small hover>\n            {/* <Link href=\"#\">Tweet it</Link> */}\n            <Link href={tweetURL} target=\"_blank\">\n              <TweetIcon icon={faTwitter} size=\"2x\" />\n            </Link>\n          </StyledButton>\n          <StyledButton alignEnd onClick={this.handleNextQuote}>\n            Next Quote{\" \"}\n            <FontAwesomeIcon\n              icon={faCircleNotch}\n              size=\"1x\"\n              pulse\n              style={{ fontWeight: \"300\" }}\n            />\n          </StyledButton>\n        </div>\n\n        <Credit>\n          Made with{\" \"}\n          <FontAwesomeIcon\n            icon={faHeart}\n            pulse\n            style={{ color: \"#f44336\", opacity: \"1\" }}\n          />{\" \"}\n          by{\" \"}\n          <Link\n            href=\"http://imsolitude.github.io\"\n            style={{ color: \"rgba(255, 255, 255, 1)\" }}\n          >\n            muhammadj\n          </Link>\n        </Credit>\n      </div>\n    );\n  }\n}\n\nconst Credit = styled.h3`\n  position: absolute;\n  bottom: -40px;\n  left: 0;\n  color: rgba(255, 255, 255, 0.5);\n  font-family: \"Karla\", sans-serif;\n  font-weight: 500;\n  text-transform: uppercase;\n  letter-spacing: 0.08rem;\n  font-size: 0.8rem;\n`;\n\nexport default App;\n","export function randomArrayValue(arr) {\n  return arr[Math.floor(Math.random() * arr.length)];\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import AppRouter from './components/Router';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\n<App />\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}